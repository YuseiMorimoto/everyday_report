今日知ったこと。


##Reactの再レンダリングの仕組みや流れ



#わからなかったこと。
handleOpen関数が一度に一回しか実行されないから、
選択されていないアイコンをクリックしたときに、
アクティブに状態になり、前の要素が非アクティブに一気になる
理由がわからなかった。

#結論
handleOpen関数が呼び出される際にStateに変更を生じるため
NavItems全体が再レンダリングされることで、
isOpenの値が変更され、その結果、子要素に以前と
異なる真偽値が渡され、アクティブ状態が変更されることがわかった。

#流れ

１　子要素のNavItemのonClickによって,handleOpen関数が呼ばれる。

２　handleOpen関数が実行され、Stateが変更される。

3　Stateが変更されることで、NavItems全体が再レンダリングされる。

4　map関数も実行され、新たにhandleOpen関数も実行されisOpenの値も変更される。

5　isOpenの値が子要素に渡され、子要素でスタイリングが制御される。

以上がこのコードにおけるアクティブ状態を制御する流れになる。




#最重要
なお、これを調べるにあたり、Reactの再レンダリングの仕組みも調査。


Reactで再レンダリングする際にどんな流れで行われているのか？

ReactではuseStateの値などをもとに再レンダリング時に変更があった箇所を
仮想DOMに反映させている。
新しく作成された仮想DOMとuseStateによる変更前の仮想DOMを比較し、
変更があった部分、つまり差分だけを実際のDOMに反映させている。

これが意味するのは、再レンダリング時には１からDOM要素を作り上げることはせず
仮想DOMを比較して、検出した差分だけを変更していると言うこと。
これにより、効率的な変更が可能になる。

ちなみに以下のコードでは再レンダリング時にNavItems全体は
仮想DOMツリーで再構築されるが、変更があった
NavItemに渡す　isOpen={isOpen}プロパティだけを
実際のDOMに反映させている。
それ以外は元のDOMのままである。


Reactの再レンダリングは
仮想DOM同士を比較して、差分だけを実際のDOMに反映させること
で効率良く変更することが可能であることを知った。



#以下コード


NavItems.tsx




"use client";

import { PRDUCT_CATEGORIES } from "@/config";
import React, { useState } from "react";
import NavItem from "./NavItem";

const NavItems = () => {
  const [activeIndex, setActiveIndex] = useState<null | number>(null);

  const isAnyOpen = activeIndex !== null;

  return (
    <div className="flex gap-4 h-full ">
      {PRDUCT_CATEGORIES.map((category, i) => {
        const handleOpen = () => {
          if (activeIndex === i) {
            setActiveIndex(null);
          } else {
            setActiveIndex(i);
          }
        };

        const isOpen = i === activeIndex;

        return (
          <NavItem
            key={category.value}
            category={category}
            handleOpen={handleOpen}
            isOpen={isOpen}
            isAnyOpen={isAnyOpen}
          />
        );
      })}
    </div>
  );
};

export default NavItems;




NavItem.tsx


"use client";

import { PRDUCT_CATEGORIES } from "@/config";
import { Button } from "./ui/button";
import { ChevronDown } from "lucide-react";
import { cn } from "@/lib/utils";

// [number]は配列のインデックスを表す
type Category = (typeof PRDUCT_CATEGORIES)[number];

// 関数も型を渡してあげる必要がある。
interface NavItemProps {
  category: Category;
  handleOpen: () => void;
  isOpen: boolean;
  isAnyOpen: boolean;
}

const NavItem = ({ category, handleOpen, isOpen, isAnyOpen }: NavItemProps) => {
  return (
    <div className="flex">
      <div className="relative flex items-center">
        <Button
          className="gap-1.5"
          onClick={handleOpen}
          variant={isOpen ? "secondary" : "ghost"}
        >
          {category.label}
          <ChevronDown
            className={cn("h-4 w-4 transition-all text-muted-foreground", {
              "-lotate-180": isOpen,
            })}
          />
        </Button>
      </div>
    </div>
  );
};

export default NavItem;
